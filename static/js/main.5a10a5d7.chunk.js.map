{"version":3,"sources":["CoasterSVG.jsx","App.js","serviceWorker.js","index.js"],"names":["CoasterSVG","props","g","maxH","height","loop","v2","maxHeight","width","d","fill","stroke","x","y","cx","cy","r","fontSize","baselineShift","Math","round","mass","App","useState","setHeight","setLoop","setMass","className","type","min","max","value","onChange","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5a10a5d7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function CoasterSVG(props) {\r\n  const g = 9.8;\r\n\r\n  function maxHeight() {\r\n    if (props.height < 2 * props.loop) {\r\n      return 0;\r\n    }\r\n    // v^2 / r == g\r\n    // v^2 = rg\r\n    // mv^2 / 2 + mgh = E\r\n    // h = (E - mv^2 / 2) / mg\r\n\r\n    let v2 = props.loop * g;\r\n    let h = (g * props.height - v2 / 2) / g;\r\n    return h;\r\n  }\r\n\r\n  let maxH = maxHeight();\r\n\r\n  return (\r\n    <svg width=\"800\" height=\"450\">\r\n      {/* frame */}\r\n      <path d=\"M 0 0 H 800 V 450 H 0 Z\" fill=\"transparent\" stroke=\"black\" />\r\n\r\n      {/* car */}\r\n      <rect\r\n        x=\"3\"\r\n        y={400 - props.height - 13}\r\n        width=\"18\"\r\n        height=\"12\"\r\n        fill=\"grey\"\r\n      />\r\n\r\n      {/* track */}\r\n      <path\r\n        d={\r\n          \"M 0 \" +\r\n          (400 - props.height) +\r\n          \" H 40 \" +\r\n          \" C 100 \" +\r\n          (400 - props.height) +\r\n          \", 130 \" +\r\n          (400 - props.height / 1.6) +\r\n          \", 150 \" +\r\n          (400 - props.height / 2) +\r\n          \" S 200 400, 350 400 H 790\"\r\n        }\r\n        stroke=\"black\"\r\n        fill=\"none\"\r\n      />\r\n\r\n      {/* loop */}\r\n      <circle\r\n        cx=\"550\"\r\n        cy={400 - props.loop}\r\n        r={props.loop}\r\n        fill=\"none\"\r\n        stroke=\"black\"\r\n      />\r\n\r\n      {/* ramp adornments */}\r\n      <text x=\"100\" y={400 - props.height - 10}>\r\n        E = mgh\r\n        <tspan fontSize=\"10\" baselineShift=\"sub\">\r\n          ramp\r\n        </tspan>{\" \"}\r\n        + mv\r\n        <tspan fontSize=\"10\" baselineShift=\"super\">\r\n          2\r\n        </tspan>\r\n        /2 = {Math.round(g * props.mass * props.height * 5) / 10} + 0\r\n      </text>\r\n      <text x=\"15\" y={400 - props.height - 20} fontSize=\"11\">\r\n        m = {props.mass}\r\n      </text>\r\n      <text x=\"10\" y={400 - props.height + 20} fontSize=\"11\">\r\n        h = {props.height}\r\n      </text>\r\n\r\n      {/* loop adornments */}\r\n      <text x=\"420\" y={400 - 2 * props.loop - 10}>\r\n        v\r\n        <tspan fontSize=\"10\" baselineShift=\"super\">\r\n          2\r\n        </tspan>{\" \"}\r\n        = 2E/m - 2gh\r\n        <tspan fontSize=\"10\" baselineShift=\"subscript\">\r\n          loop\r\n        </tspan>{\" \"}\r\n        = {Math.round(g * props.height * 20) / 10} -{\" \"}\r\n        {Math.round(g * 2 * props.loop * 20) / 10} ={\" \"}\r\n        {Math.round(g * (props.height - 2 * props.loop) * 20) / 10}\r\n      </text>\r\n\r\n      <text x=\"525\" y={400 - 2 * props.loop + 20}>\r\n        <tspan fill={maxH >= 2 * props.loop ? \"green\" : \"red\"}>\r\n          v\r\n          <tspan fontSize=\"10\" baselineShift=\"super\">\r\n            2\r\n          </tspan>\r\n          /r {maxH >= 2 * props.loop ? \">\" : \"<\"} g\r\n        </tspan>\r\n      </text>\r\n\r\n      <text x=\"535\" y={400 - props.loop} fontSize=\"11\">\r\n        r = {props.loop}\r\n      </text>\r\n\r\n      <text x=\"525\" y=\"430\">\r\n        <tspan fill={maxH >= 2 * props.loop ? \"green\" : \"red\"} fontSize=\"30\">\r\n          {maxH >= 2 * props.loop ? \"YES\" : \"NO\"}\r\n        </tspan>\r\n      </text>\r\n    </svg>\r\n  );\r\n}\r\n","import React, {useState} from 'react';\nimport CoasterSVG from './CoasterSVG'\nimport './App.css';\n\nfunction App() {\n  let [height, setHeight] = useState(350);\n  let [loop, setLoop] = useState(100);\n  let [mass, setMass] = useState(50);\n  return (\n    <div className=\"App\">\n      <h1>Does the coaster make it around the loop?</h1>\n      <CoasterSVG height={height} loop={loop} mass={mass} />\n      <form>\n        <label>Height:</label>\n        <input\n          type=\"range\"\n          min=\"50\"\n          max=\"350\"\n          value={height}\n          onChange={(e) => setHeight(e.target.value)}\n        />\n        <label>Loop height:</label>\n        <input\n          type=\"range\"\n          min=\"40\"\n          max=\"170\"\n          value={loop}\n          onChange={(e) => setLoop(e.target.value)}\n        />\n        <label>Mass:</label>\n        <input\n          type=\"range\"\n          min=\"1\"\n          max=\"1000\"\n          value={mass}\n          onChange={(e) => setMass(e.target.value)}\n        />\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}